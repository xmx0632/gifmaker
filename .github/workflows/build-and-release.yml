name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggered when pushing a tag starting with v, e.g., v1.0.0

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            asset_name: gif-maker-linux
            asset_path: dist/linux/gif-maker
          - os: windows-latest
            platform: windows
            arch: x86_64
            asset_name: gif-maker-windows.exe
            asset_path: dist/windows/gif-maker.exe
          - os: macos-latest
            platform: macos
            arch: x86_64
            asset_name: gif-maker-macos-x86_64
            asset_path: dist/macos/x64/gif-maker
          - os: macos-latest
            platform: macos
            arch: arm64
            asset_name: gif-maker-macos-arm64
            asset_path: dist/macos/arm64/gif-maker

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.1'
        cache: 'pip'

    - name: Hash requirements file
      id: hash-requirements
      run: echo "hash=${{ hashFiles('requirements.txt') }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache virtual environment
      uses: actions/cache@v4
      id: venv-cache
      with:
        path: |
          git_env
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-venv-${{ steps.hash-requirements.outputs.hash }}
        restore-keys: |
          ${{ runner.os }}-venv-

    - name: Create virtual environment
      if: steps.venv-cache.outputs.cache-hit != 'true'
      run: |
        python -m venv git_env
        
    - name: Install dependencies (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        source git_env/bin/activate
        if [ "${{ steps.venv-cache.outputs.cache-hit }}" != 'true' ]; then
          pip install -r requirements.txt
        fi
        
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        call git_env\Scripts\activate.bat
        if not defined CACHE_HIT (
          pip install -r requirements.txt
        )
      shell: cmd
      env:
        CACHE_HIT: ${{ steps.venv-cache.outputs.cache-hit }}

    - name: Build application (Linux/macOS x86_64)
      if: matrix.os != 'windows-latest' && matrix.arch == 'x86_64'
      run: |
        source git_env/bin/activate
        python build.py
        # Output directory structure for debugging
        ls -la dist/
        find dist -type f -name "gif-maker*"
        
        # Ensure directory structure exists
        if [[ "${{ matrix.platform }}" == "linux" ]]; then
          mkdir -p dist/linux
          # Try different file name patterns
          if [ -f dist/gif-maker-linux-x86_64 ]; then
            cp dist/gif-maker-linux-x86_64 dist/linux/gif-maker
          elif [ -f dist/gif-maker-linux ]; then
            cp dist/gif-maker-linux dist/linux/gif-maker
          else
            # If none of the above files exist, copy any Linux executable found
            find dist -type f -name "gif-maker-linux*" -exec cp {} dist/linux/gif-maker \; -quit
          fi
          chmod +x dist/linux/gif-maker
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          mkdir -p dist/macos/x64
          # Try different file name patterns
          if [ -f dist/gif-maker-macos-x86_64 ]; then
            cp dist/gif-maker-macos-x86_64 dist/macos/x64/gif-maker
          elif [ -f dist/gif-maker-macos ]; then
            cp dist/gif-maker-macos dist/macos/x64/gif-maker
          else
            # If none of the above files exist, copy any macOS executable found
            find dist -type f -name "gif-maker-macos*" -exec cp {} dist/macos/x64/gif-maker \; -quit
          fi
          chmod +x dist/macos/x64/gif-maker
        fi
        
    - name: Build application (macOS ARM64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      run: |
        source git_env/bin/activate
        python build.py
        # Output directory structure for debugging
        ls -la dist/
        find dist -type f -name "gif-maker*"
        
        # Manually create directory structure and copy files
        mkdir -p dist/macos/arm64
        # Try different file name patterns
        if [ -f dist/gif-maker-macos-arm64 ]; then
          cp dist/gif-maker-macos-arm64 dist/macos/arm64/gif-maker
        elif [ -f dist/gif-maker-macos ]; then
          cp dist/gif-maker-macos dist/macos/arm64/gif-maker
        # If it doesn't exist, copy the x86_64 version (we can't actually build a real ARM version on GitHub Actions)
        elif [ -f dist/gif-maker-macos-x86_64 ]; then
          cp dist/gif-maker-macos-x86_64 dist/macos/arm64/gif-maker
        # If none of the above files exist, copy any available macOS executable
        else
          find dist -type f -name "gif-maker-macos*" -exec cp {} dist/macos/arm64/gif-maker \; -quit
        fi
        
        chmod +x dist/macos/arm64/gif-maker
        
    - name: Build Application (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chcp 65001
        call git_env\Scripts\activate.bat
        python build.py
        REM Output directory structure for debugging
        dir dist /s
        REM Manually create directory structure and copy files
        if not exist dist\windows mkdir dist\windows
        REM Try different file name patterns
        if exist dist\gif-maker-windows-x86_64.exe (
          copy dist\gif-maker-windows-x86_64.exe dist\windows\gif-maker.exe
        ) else if exist dist\gif-maker-windows.exe (
          copy dist\gif-maker-windows.exe dist\windows\gif-maker.exe
        ) else (
          REM If above files don't exist, copy any found .exe file
          for /f "tokens=*" %%a in ('dir /b /s dist\*.exe') do copy "%%a" dist\windows\gif-maker.exe
        )
      shell: cmd
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_path }}
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: View downloaded build artifacts
        run: |
          ls -la ./artifacts
          find ./artifacts -type f
          
      - name: Prepare release files
        run: |
          mkdir -p ./release-files
          # Copy build artifacts that may exist
          [ -f ./artifacts/gif-maker-linux/gif-maker ] && cp ./artifacts/gif-maker-linux/gif-maker ./release-files/gif-maker-linux
          [ -f ./artifacts/gif-maker-windows.exe/gif-maker.exe ] && cp ./artifacts/gif-maker-windows.exe/gif-maker.exe ./release-files/gif-maker-windows.exe
          [ -f ./artifacts/gif-maker-macos-x86_64/gif-maker ] && cp ./artifacts/gif-maker-macos-x86_64/gif-maker ./release-files/gif-maker-macos-x86_64
          [ -f ./artifacts/gif-maker-macos-arm64/gif-maker ] && cp ./artifacts/gif-maker-macos-arm64/gif-maker ./release-files/gif-maker-macos-arm64
          
          # View prepared release files
          ls -la ./release-files
          
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: ./release-files/*
          body: |
            # GIF Maker ${{ steps.get_version.outputs.VERSION }}
            
            将多张图片合并成一张GIF动态图片的跨平台工具。
            
            ## 下载
            
            - [Windows](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/gif-maker-windows.exe)
            - [macOS (Intel/x86_64)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/gif-maker-macos-x86_64)
            - [macOS (Apple Silicon/ARM64)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/gif-maker-macos-arm64)
            - [Linux](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/gif-maker-linux)
            
            ## 使用方法
            
            ```bash
            # 基本用法
            ./gif-maker -i 图片目录 -o 输出文件名.gif -d 帧延迟(毫秒)
            
            # 示例
            ./gif-maker -i ./images -o output.gif -d 200
            ```
